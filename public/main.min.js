(function () {
    'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }

    var defaultConfig = {
        classNameActiveLinkInNavigation: 'active-link',
        classNameKeyboardNavigationActive: 'keyboard-nav',
        classNamePageTransition: '',
        classNameRemovalDelayPageTransition: 0,
        classNameRemovalDelaySplashLoading: 0,
        classNameSplashLoading: '',
        directoryContent: 'content',
        domSelectorBody: 'body',
        domSelectorContent: '#content',
        domSelectorNavigation: '#nav',
        pathFileNotFound: '/404',
        pathToIndexContent: '/index',
        pathToNavigationContent: '',
        loadIndexContentOnLoad: false,
    };
    var config = __assign({}, defaultConfig);
    var setConfig = function (newConfig) {
        return (config = Object.assign(config, newConfig));
    };

    var _elements = {};
    var _setElement = function (name, selector) {
        var elementRef = document.querySelector(selector);
        return !!elementRef ? (_elements[name] = elementRef) : null;
    };
    var elementReference = {
        get body() {
            return _elements.body || _setElement('body', config.domSelectorBody);
        },
        get navigation() {
            return _elements.navigation || _setElement('navigation', config.domSelectorNavigation);
        },
        get content() {
            return _elements.content || _setElement('content', config.domSelectorContent);
        },
    };

    // Remove leading slash in string
    var stripLeadingSlash = function (str) { return str.replace(/^\/+/i, ''); };
    var wait = function (ms) { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
        return [2 /*return*/, new Promise(function (resolve) { return setTimeout(resolve, ms); })];
    }); }); };
    //
    // Check if url is considered to be a relative path
    var isRelativeUrl = function (url) {
        return url.indexOf('://') < 1 && url.indexOf('//') !== 0;
    };
    //
    // Check if is running on a Mac
    var isMac = function () { return window.navigator.appVersion.includes('Mac'); };
    //
    // Create full URL from path and append content folder and extension
    var createContentUrlFromPath = function (path) {
        var newPath = stripLeadingSlash(path);
        if (newPath === '') {
            newPath = config.pathToIndexContent;
        }
        return config.directoryContent + "/" + newPath + ".html";
    };
    //
    // Add class on all links that match current path
    // and remove class on the others
    var setActiveLinks = function (parent, currentPath) {
        if (!(parent instanceof Element)) {
            return;
        }
        var linkElements = parent.querySelectorAll('a');
        var links = __spreadArrays(Array.from(linkElements));
        // Set inactive
        links.forEach(function (link) {
            return removeClassFromElement(link, config.classNameActiveLinkInNavigation);
        });
        // Set active
        links
            .filter(function (link) {
            return !!link.getAttribute('href') &&
                stripLeadingSlash(link.getAttribute('href') || '') ===
                    stripLeadingSlash(currentPath);
        })
            .forEach(function (link) {
            return addClassFromElement(link, config.classNameActiveLinkInNavigation);
        });
    };
    var hideSplashLoading = function (loadingTime) {
        if (loadingTime > config.classNameRemovalDelaySplashLoading) {
            if (!!elementReference.body) {
                removeClassFromElement(elementReference.body, config.classNameSplashLoading);
            }
        }
        else {
            setTimeout(function () {
                if (!!elementReference.body) {
                    removeClassFromElement(elementReference.body, config.classNameSplashLoading);
                }
            }, config.classNameRemovalDelaySplashLoading - loadingTime);
        }
    };
    var removeClassFromElement = function (element, className) {
        if (element instanceof Element && !!className) {
            element.classList.remove(className);
        }
    };
    var addClassFromElement = function (element, className) {
        if (element instanceof Element && !!className) {
            element.classList.add(className);
        }
    };
    //
    // Async fetch content from URL and return as text
    var getHtmlFromUrl = function (url) { return __awaiter(void 0, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fetch(url)];
                case 1:
                    response = _a.sent();
                    if (response.status >= 400 && response.status < 600) {
                        throw new Error('File not found');
                    }
                    return [4 /*yield*/, response.text()];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    }); };

    var currentPath = function () { return window.location.pathname; };
    var setNewPath = function (newPath) {
        return currentPath() === newPath
            ? undefined
            : history.pushState('', newPath, newPath);
    };
    var closeNavigation = function () {
        if (!!elementReference.navigation) {
            var inputElem = elementReference.navigation.querySelector('input');
            if (!!inputElem && inputElem.checked) {
                inputElem.checked = false;
            }
        }
    };
    var setActiveLinksInNavigation = function () {
        if (!!elementReference.navigation) {
            setActiveLinks(elementReference.navigation, currentPath());
        }
    };

    //
    // Remove all child nodes in parent element
    var removeChildNodes = function (parent) {
        while (parent instanceof Element && parent.firstChild) {
            parent.firstChild.remove();
        }
    };
    //
    // Add child node to parent element
    var addChildNode = function (parent, child) {
        if (parent instanceof Element && !!child) {
            parent.appendChild(child);
        }
    };
    //
    // Create element nodes from HTML text string
    var createNodesFromHtmlString = function (html) {
        var template = document.createElement('template');
        template.innerHTML = html;
        return __spreadArrays(Array.from(template.content.childNodes));
    };
    var replaceNodesFromHtmlString = function (parent, htmlString) {
        removeChildNodes(parent);
        createNodesFromHtmlString(htmlString).forEach(function (child) {
            return addChildNode(parent, child);
        });
    };

    //
    // Fetch new content based on path and mount it in the DOM #content container
    var loadContent = function (path) { return __awaiter(void 0, void 0, void 0, function () {
        var url, html;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    url = createContentUrlFromPath(path);
                    return [4 /*yield*/, getHtmlFromUrl(url).catch(function (err) {
                            // CHECK STATUS HERE
                            if (path !== config.pathFileNotFound) {
                                return loadContent(config.pathFileNotFound);
                            }
                            throw new Error(err);
                        })];
                case 1:
                    html = _a.sent();
                    if (!(!!html && elementReference.content)) return [3 /*break*/, 5];
                    if (!!!config.classNamePageTransition) return [3 /*break*/, 4];
                    addClassFromElement(elementReference.body, config.classNamePageTransition);
                    if (!(config.classNameRemovalDelayPageTransition > 0)) return [3 /*break*/, 3];
                    return [4 /*yield*/, wait(config.classNameRemovalDelayPageTransition)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    replaceNodesFromHtmlString(elementReference.content, html);
                    setNewPath(path);
                    removeClassFromElement(elementReference.body, config.classNamePageTransition);
                    return [3 /*break*/, 5];
                case 4:
                    replaceNodesFromHtmlString(elementReference.content, html);
                    setNewPath(path);
                    _a.label = 5;
                case 5: return [2 /*return*/];
            }
        });
    }); };
    //
    // Fetch nav content and mount it in the DOM #nav container
    var loadNavigation = function () { return __awaiter(void 0, void 0, void 0, function () {
        var url, html;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!config.pathToNavigationContent) {
                        return [2 /*return*/, Promise.resolve()];
                    }
                    url = createContentUrlFromPath(config.pathToNavigationContent);
                    return [4 /*yield*/, getHtmlFromUrl(url).catch(function (err) {
                            throw new Error(err);
                        })];
                case 1:
                    html = _a.sent();
                    if (!!html && !!elementReference.navigation) {
                        replaceNodesFromHtmlString(elementReference.navigation, html);
                    }
                    return [2 /*return*/];
            }
        });
    }); };

    //
    // On window load event (when all linked resources has been loaded)
    // read path from window URL and load content corresponding to that
    // also load nav content
    var onLoad = function () {
        var timeStart = performance.now();
        var contentToLoad = [loadNavigation()];
        if (currentPath() !== '/' || config.loadIndexContentOnLoad) {
            console.log(currentPath());
            contentToLoad = __spreadArrays(contentToLoad, [loadContent(currentPath())]);
        }
        Promise.all(contentToLoad).then(function () {
            setActiveLinksInNavigation();
            hideSplashLoading(performance.now() - timeStart);
        });
    };
    //
    // Catch all click events that has and anchor as target
    // and prevent all relative link paths from reloading the page.
    // Load the new content in the #content container instead
    var onClick = function (event) {
        // Turn of keyboard navigation highlight
        if (event.clientX && event.clientY) {
            removeClassFromElement(elementReference.body, config.classNameKeyboardNavigationActive);
        }
        if (event.target instanceof Element) {
            var clickedElement = event.target;
            // Dont do anything if the clicked target is not an A-tag
            if (clickedElement.tagName.toLowerCase() !== 'a') {
                return;
            }
            // Check if the path is relative to this site
            var path = clickedElement.getAttribute('href');
            if (!!path && isRelativeUrl(path)) {
                // Check if the link target is intended to be opened in a new tab or window.
                var newTab = (isMac() && event.metaKey) || (!isMac() && event.ctrlKey);
                var newWindow = event.shiftKey;
                if (newTab || newWindow) {
                    return;
                }
                // Load new content based on relative link path
                event.preventDefault();
                closeNavigation();
                loadContent(path).then(function () { return setActiveLinksInNavigation(); });
            }
        }
    };
    //
    // When back button is clicked in browser update the content
    // corresponding to the path
    var onPopState = function (event) {
        event.preventDefault();
        closeNavigation();
        loadContent(currentPath()).then(function () { return setActiveLinksInNavigation(); });
    };
    var onKeyUp = function (event) {
        // If using TAB key to navigate; enable keyboard navigation classname to body
        if (event.which === 9) {
            addClassFromElement(elementReference.body, config.classNameKeyboardNavigationActive);
        }
        // Close the menu by pressing ESC if it is open
        if (event.which === 27) {
            closeNavigation();
        }
    };

    window.onload = onLoad;
    window.onclick = onClick;
    window.onpopstate = onPopState;
    window.onkeyup = onKeyUp;

    setConfig({});

}());
